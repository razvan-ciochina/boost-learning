// Boost Software License - Version 1.0 - August 17th, 2003
// 
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.



#include <iostream>
#include <boost/asio.hpp>
#include <boost/thread/thread.hpp>
#include <boost/bind/bind.hpp>

// Timer.5 Synchronising handlers in multithreaded programs
// Important concepts:
//   Strands: https://www.boost.org/doc/libs/1_78_0/doc/html/boost_asio/overview/core/strands.html
//	 Executor: https://live.boost.org/doc/libs/1_66_0/doc/html/boost_asio/reference/Executor1.html

class printer {
public:
	printer(boost::asio::io_context &io)
		: strand_(boost::asio::make_strand(io)), 
		  timer1_(io, boost::asio::chrono::seconds(1)),
		  timer2_(io, boost::asio::chrono::seconds(1)),
		  count_(0)
	{
		// as it looks from the code the executor is an association of something that can get called and
		// an execution context, conceptually this reads as: print1 will be executed on strand_, which is
		// defined as a sequence of calls to handlers in the doc
		timer1_.async_wait(boost::asio::bind_executor(strand_, boost::bind(&printer::print1, this)));
		timer2_.async_wait(boost::asio::bind_executor(strand_, boost::bind(&printer::print2, this)));
	}

	~printer()
	{
		std::cout << "Final count is " << count_ << std::endl;
	}


	void print1()
	{
		if (count_ < 10) {
			std::cout << "Timer 1: " << count_ << std::endl;
			++count_;
			timer1_.expires_at(timer1_.expiry() + boost::asio::chrono::seconds(1));
			// again the executor binding seems to replace the previous executor, an interesting question
			// here would be: what happens if after the first call the handler is "executor bound" to another
			// execution unit, thread, whatever
			timer1_.async_wait(boost::asio::bind_executor(strand_, boost::bind(&printer::print1, this)));
		}
	}

    void print2()
    {
        if (count_ < 10) {
            std::cout << "Timer 2: " << count_ << std::endl;
            ++count_;
			
            timer2_.expires_at(timer2_.expiry() + boost::asio::chrono::seconds(1));
            timer2_.async_wait(boost::asio::bind_executor(strand_, boost::bind(&printer::print2, this)));
        }
    }

private:
	boost::asio::strand<boost::asio::io_context::executor_type> strand_;
	boost::asio::steady_timer timer1_;
	boost::asio::steady_timer timer2_;
	int count_;
};

int main(int,char**) {
	boost::asio::io_context io;
	printer p(io);
	boost::thread t(boost::bind(&boost::asio::io_context::run, &io));
	io.run();
	t.join();
	return 0;
}
